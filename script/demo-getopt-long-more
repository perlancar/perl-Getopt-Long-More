#!perl

# DATE
# VERSION

use strict;
use warnings;
use Getopt::Long::More;

Getopt::Long::More::Configure('auto_help', 'auto_version');

my %opts = (
    cols => 1,
    bg   => 0,
    module => [],
    array => [],
);

my @argv;

my $res = GetOptions(
    'flag1|1'    => \$opts{flag1},
    'flag2|f'    => \$opts{flag2},
    'bool|b!'    => \$opts{bool},
    'int=i'      => optspec(
        destination => \$opts{int},
        summary     => 'An integer number',
        default     => 42,
    ),
    'module|M=s@' => optspec(
        required    => 1,
        destination => $opts{module},
        summary     => 'Module name(s)',
        description => <<'_',
One or more module names.

Each module must be valid Perl module name.
_
        completion => sub {
            require Complete::Util;
            my %args = @_;
            return {
                words => Complete::Util::complete_array_elem(
                    array=>[
                        "Complete::Util",
                        "Text::ANSITable",
                        "Text::ANSI::",
                        "Text::ANSI::Util",
                    ],
                    word=>$args{word},
                ),
                path_sep => '::',
            };
        },
    ),
    'float|F=f' => \$opts{float},
    'str|text|S=s' => \$opts{str},
    'array=s@' => $opts{array},
    'int-comp-array=i' => optspec(
        destination => \$opts{int_comp_array},
        completion  => sub {
            require Complete::Util;
            my %args = @_;
            Complete::Util::complete_array_elem(array=>[1..10], word=>$args{word});
        },
    ),
    'str-comp-sub=s' => optspec(
        destination => \$opts{str_comp_sub},
        completion  => sub {
            require Complete::Util;
            my %args = @_;
            return complete_array_elem(array=>[map {"$args{word}$_"} "a".."z"],
                                       word=>$args{word});
        },
    ),
    'show-pod' => sub {
        print Getopt::Long::More::OptionsPod;
        exit 0;
    },
    '<>' => optspec(
        destination => sub { push @argv, $_[0] },
        required    => 1,
        completion  => sub {
            require Complete::Util;
            my %args = @_;
            my $argpos = $args{argpos};
            Complete::Util::complete_array_elem(
                array=>["arg$argpos-a", "arg$argpos-b"], word=>$args{word});
        },
    ),
);

print +($res ? "Getopt succeeded" : "Getopt failed"), "\n";
print "flag1: ", $opts{flag1} ? 1:0, "\n";
print "flag2: ", $opts{flag2} ? 1:0, "\n";
print "int: $opts{int}\n";
print "module: [", join(", ", @{$opts{module}}), "]\n";
print "argv: [", join(", ", @argv), "]\n";

# ABSTRACT: Script to demonstrate Getopt::Long::More
# PODNAME:

=head1 SYNOPSIS

Activate completion using (can be put in your bash startup file):

 % complete -C demo-getopt-long-more demo-getopt-long-more

Test completion:

 % demo-getopt-long-more <tab>
 % demo-getopt-long-more -<tab>
 % demo-getopt-long-more --int 1 -<tab>
 # and so on
